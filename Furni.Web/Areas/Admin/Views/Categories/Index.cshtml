    @model IEnumerable<CategoryViewModel>

@{
    ViewData["Title"] = "Categories";

}

@section Styles {
    <link rel="stylesheet" href="~/lib/magnific-popup.js/magnific-popup.min.css">
}

<partial name="_Toolbar" />


<div class="card shadow-sm">
    <partial name="_DataTablesCardHeader" /> 
    <div class="card-body pt-0">
        <div class="table-responsive">
            <table class="table table-row-bordered gy-4 align-middle js-datatables" data-document-title="Categories">
                <thead>
                    <tr class="fw-bold fs-6 text-gray-800">
                        <th>Category</th>
                        <th>Status</th>
                        <th>Created On</th>
                        <th>Last Updated On</th>
                        <th class="js-no-export text-end">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var category in Model)
                    {
                        <partial name="_CategoryRow" model="@category" />
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@Html.AntiForgeryToken()

@section Plugins {
    <script src="~/assets/plugins/datatables/datatables.bundle.js"></script>
    <script src="~/assets/plugins/datatables/vfs_fonts.js"></script>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="~/lib/expressive-annotations-validate/expressive.annotations.validate.min.js"></script>

    <script>
        $(document).ready(function () {
            // Function to set up image preview
            function setupImagePreview(modal) {
                var imageInput = modal.querySelector('#image-input');
                var imagePreviewWrapper = modal.querySelector('.image-input-wrapper');

                if (imageInput && imagePreviewWrapper) {
                    // Function to handle image change
                    function handleImageChange(event) {
                        var input = event.target;
                        if (input.files && input.files[0]) {
                            var reader = new FileReader();
                            reader.onload = function (e) {
                                // Ensure background image is cleared before setting the new one
                                imagePreviewWrapper.style.backgroundImage = ''; // Clear existing image
                                imagePreviewWrapper.classList.remove('image-input-placeholder'); // Remove placeholder class

                                // Set the new image as a background image
                                imagePreviewWrapper.style.backgroundImage = 'url(' + e.target.result + ')';
                            };
                            reader.readAsDataURL(input.files[0]);
                        }
                    }

                    // Attach event listeners
                    imageInput.addEventListener('change', handleImageChange);

                    // Store handlers for cleanup
                    modal.imageInputHandler = handleImageChange;
                }
            }

            // Function to clean up image preview and event listeners
            function cleanupImagePreview(modal) {
                var imageInput = modal.querySelector('#image-input');
                var imagePreviewWrapper = modal.querySelector('.image-input-wrapper');

                if (imageInput && modal.imageInputHandler) {
                    imageInput.removeEventListener('change', modal.imageInputHandler);
                }

                if (imagePreviewWrapper) {
                    imagePreviewWrapper.style.backgroundImage = '';
                }
            }

            // Initialize the image preview on modal show
            $(document).on('shown.bs.modal', '#Modal', function () {
                // Adding a slight delay to ensure elements are loaded
                setTimeout(() => {
                    setupImagePreview(this);
                }, 1000); // Adjust the delay as needed
            });

            // Cleanup the image preview on modal hide
            $(document).on('hidden.bs.modal', '#Modal', function () {
                cleanupImagePreview(this);
            });
        });
    </script>


}